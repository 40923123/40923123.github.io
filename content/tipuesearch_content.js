var tipuesearch = {"pages": [{'title': '自我介紹', 'text': '本人來自虎尾科技大學機械設計工程 \n', 'tags': '', 'url': '自我介紹.html'}, {'title': '電腦繪圖及機械製造', 'text': '目前使用的工具: \n \n ISO Tolerances\xa0 功用為查詢公差精度及位置 \n Key Design\xa0 功用為查詢鍵的規格及承受壓/減應力 \n \n', 'tags': '', 'url': '電腦繪圖及機械製造.html'}, {'title': '鍵和鍵槽', 'text': '\n \n \n \n \n \n', 'tags': '', 'url': '鍵和鍵槽.html'}, {'title': '逕向間隙', 'text': '逕向間隙位置如下圖: \n \n 須注意配合若為干涉了話則干涉量的平均(最大+最小除以2)的80%必須小於逕向間隙 , 否則滾珠與內外環沒又間隙會無法摩擦 ° \n \n 以下為逕向間隙的規格: \n \n \n', 'tags': '', 'url': '逕向間隙.html'}, {'title': '語文能力', 'text': '接下來我的目標是學會英文及日文雙語言已達到符合已達到銜接國際市場要求 \n 目標2021-01-19開始為 \n \n 日文: N5 \n 英文: 多益400分 \n \n 並且從今日起開始實行! \n', 'tags': '', 'url': '語文能力.html'}, {'title': '日文', 'text': '進度表: \n \n 日本50音(平假名) \n 日本50音(片假名) \n 濁音(平假名) \n 濁音(片假名) \n 拗音(平假名) \n 拗音(片假名) \n \n 以上第一步為認識日文的第一階段', 'tags': '', 'url': '日文.html'}, {'title': '英文', 'text': '目標: \n \n 先將單字量擴大先以每天5個每周至少40個開始 \n \n', 'tags': '', 'url': '英文.html'}, {'title': 'python 程式語言', 'text': '此串目的是學習python的集中串 , 會不定時的更新', 'tags': '', 'url': 'python 程式語言.html'}, {'title': 'keywords', 'text': 'python的關鍵字一共有33個 \n \n 每一項都擁有不一樣的功能如下表(自行整理如有錯誤或版本問題會持續更新)', 'tags': '', 'url': 'keywords.html'}, {'title': 'input', 'text': 'Sometimes we would like to take the value for a variable from the user via their keyboard. Python provides a built-in function called\xa0 input \xa0that gets input from the keyboard 1 . When this function is called, the program stops and waits for the user to type something. When the user presses\xa0 Return \xa0or\xa0 Enter , the program resumes and\xa0 input \xa0returns what the user typed as a string. \n 簡單來說有時候會出現需要根據輸入不一樣的字 , 而產生一些不一樣的功用 \n \n 目前想到有你在遊戲裡輸入名字而接下來的劇情顯示名字則會一直出現這個名字 \n \n \n (此文暫時到這如有新內容則會進行更新)', 'tags': '', 'url': 'input.html'}, {'title': 'print', 'text': 'print為顯示可以顯示訊息或這是數字 \n \n 而顯示的數字是可以在裡面放上 + 的符號會根據數字或字串的不同而有不一樣的顯示 \n \n 如同上圖若是數字(int)則會相加但如果是字串(str)則會變成一起顯示', 'tags': '', 'url': 'print.html'}, {'title': '變數及基本運算', 'text': 'python 可以做出基本的甚至複雜的運算(用迴圈)以及一些字串或數字的顯示 \n \n 不管加減乘除都可以 \n \n \n \n \n \n \n 普遍的像是: 1+1=2 , 4*4=16 , 4**4=256(a**b=為a的b次方) , 7/2=3.5 , 7//2=3(除法取整數) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa07%2=1(取餘數)等等', 'tags': '', 'url': '變數及基本運算.html'}, {'title': 'assign 指定', 'text': '在程式語言裡 = 就等於指定的意思 \n 例如 a = b\xa0 就是把 b （這個物件）指定給 a （這個變數） \n 像是\xa0 a = 10 \xa0 就是指定 a 這個變數的值為 10， \xa0 a = a + 5 則是把 \xa0 a + 5 這個值再重新指定給 a ， 所以此時的 a 就從 10 變成 15了。 \n \n 另外還能同時運算並指派的功能例如: +=,-=,*=等等 像是輸入a +=5就等於 a = a + 5一樣 \n 其他還包括 *= \xa0 、 \xa0 /= \xa0 、 \xa0 %= \xa0 、 \xa0 **=這些都是在運算後再重新派給自己 \n 如果要判斷 a 是否等於 b ，則是要使用\xa0 == \xa0 來判斷。 a == b \xa0 所代表的即是判定 a 的值是否等於 b ，如果 a 的確跟 b 相同的話，會回傳 True；反之，則回傳 False。 \n \n', 'tags': '', 'url': 'assign 指定.html'}, {'title': 'Dictionary 字典', 'text': "主要是把一群可能是數字,字串,或者其他的東西做出分類並儲存 \n 例如: \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n game_1  =   { 'name'   :  'lol'   ,  'year'   :  '2010'   } \n game_2  =   dict   (name  =   'PUBG'   , year  =   '2017' )  \n \n \n \n \n \n \n \n 建立字典以後，我們可以利用下面的作法來存取 key 的值，也就是透過 key 來取得對應的 value： \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n print   (game_1[ 'name' ]) \n print   (game_2[ 'year' ]) \n \n \n \n \n \n \n \n 執行完如下圖: \n \n 簡單來說就是輸入對應的key就會丟給你字典裡相對的資料", 'tags': '', 'url': 'Dictionary 字典.html'}, {'title': 'git 指令表', 'text': '\n \n git init \n 建立新的本地端 Repository。 \n \n \n git clone [Repository URL] \n 複製遠端的 Repository 檔案到本地端。 \n \n \n git status \n 檢查本地端檔案異動狀態。 \n \n \n git add [檔案或資料夾] \n 將指定的檔案（或資料夾）加入版本控制。用 \xa0 git add . \xa0 可加入全部。 \n \n \n git commit \n 提交（commit）目前的異動。 \n \n \n git commit -m "提交說明內容" \n 提交（commit）目前的異動並透過 \xa0 -m \xa0 參數設定摘要說明文字。 \n \n \n git stash \n 獲取目前工作目錄的 dirty state，並保存到一個未完成變更的 stack，以方便隨時回復至當初的 state。 \n \n \n git log \n 查看先前的 commit 記錄。 \n \n \n git push \n 將本地端 Repository 的 commit 發佈到遠端。 \n \n \n git push origin [BRANCH_NAME] \n 發佈至遠端指定的分支（Branch） \n \n \n git branch \n 查看分支。 \n \n \n git branch [BRANCH_NAME] \n 建立分支。 \n \n \n git checkout [BRANCH_NAME] \n 取出指定的分支。 \n \n \n git checkout -b [BRANCH_NAME] \n 建立並跳到該分支。 \n \n \n git branch -D [BRANCH_NAME] \n 強制刪除指定分支（須先切換至其他分支再做刪除）。 \n \n \n git reset --hard [HASH] \n 強制恢復到指定的 commit（透過 Hash 值）。 \n \n \n git checkout [HASH] \n 切換到指定的 commit（與 \xa0 git checkout [BRANCH_NAME] \xa0 相同)。 \n \n \n git branch -m <OLD_BRANCH_NAME> <NEW_BRANCH_NAME> \n 修改分支名稱。 \n \n', 'tags': '', 'url': 'git 指令表.html'}]};